library(dplyr)
meta.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/Perlut/data/Perlut_metadata.csv', header = T)
master.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/Perlut/data/Routput/master.csv', header = T)
rm(meta.df)
View(master.df)
library(vegan)
data("dune")
View(dune)
str(dune)
length(unique(master.df$OTUid))
length(unique(master.df$BOLDid))
length(unique(master.df$BOLDalt))
x = count(master.df, vars = c("BOLDalt", "OTUid"))
OTUperSiteWeek = count(master.df, vars = c("NestBox", "Date"))
library(plyr)
x = count(master.df, vars = c("BOLDalt", "OTUid"))
View(x)
duplicated(x)
duplicated(x$BOLDalt)
y = x[duplicated(x$BOLDalt),]
View(y)
a <- strrep("apple",1:3)
b <- strrep("banana",1:3)
c <- strrep("coconut",1:3)
a <- strrep("apple",:3)
a <- strrep("apple",3)
col1 <- rep(c("Abe", "Bud", "Cal"), times = c(2,3,4))
User <- rep(c("Abe", "Bud", "Cal"), times = c(2,3,4))
rm(col1)
rm(a,b,c)
MovieTitle <- c("PlanetEarth", "Python4dummies", "PlanetEarth", "KermitsAdventures", "FrogTales", "Platoon", "Platoon", "Platoon", "Platoon")
BarcodeID <- c("001", "003", "002", "101", "102", "103", "941", "942", "943", "944")
BarcodeID <- c("001", "003", "002", "101", "102", "941", "942", "943", "944")
sample.int(9)
sample.int(100)
?sample.int()
sample.int(9, 100)
seq(1, 9, by = 2)
sample.int(9)
Fees <- c(1,1,2,1,1,9,7,5,3)
toy.df <- data.frame(User, MovieTitle, BarcodeID, Fees)
View(toy.df)
View(toy.df)
library(dplyr)
by_fees <- toy.df %>% group_by(Fees)
View(by_fees)
toy.df %>% group_by(User, MovieTitle, Fees)
mtcars %>%
group_by(cyl)
mtcars %>%
group_by(cyl) %>%
summarise(mean = mean(disp), n = n())
toy.df %>%
group_by(User, MovieTitle, Fees) %>%
summarise(Fees, n())
toy.df %>% tally()
mtcars %>% tally()
mtcars
str(mtcars)
mtcars %>% count(cyl)
library(dplyr)
mtcars %>% count(cyl)
toy.df %>% count(Fees)
str(toy.df)
toy.df %>% count(User)
## generate a toy dataset
User <- rep(c("Abe", "Bud", "Cal"), times = c(2,3,4))
MovieTitle <- c("PlanetEarth", "Python4dummies", "PlanetEarth", "KermitsAdventures", "FrogTales", "Platoon", "Platoon", "Platoon", "Platoon")
BarcodeID <- c("001", "003", "002", "101", "102", "941", "942", "943", "944")
Fees <- c(1,1,2,1,1,9,7,5,3)
toy.df <- data.frame(User, MovieTitle, BarcodeID, Fees)
toy.df %>% count(User)
toy.df %>% count(BarcodeID)
toy.df
toy.df %>%
summarise(total_fees = sum(Fees)
msleep %>%
summarise(avg_sleep = mean(sleep_total))
str(toy.df)
toy.df <- as.data.frame(User, MovieTitle, BarcodeID, Fees)
toy.df <- data.frame(User, MovieTitle, BarcodeID, Fees)
str(toy.df)
toy.df$User <- as.character(toy.df$User)
str(toy.df)
toy.df$MovieTitle <- as.character(toy.df$MovieTitle)
str(toy.df)
toy.df$BarcodeID <- as.character((toy.df$BarcodeID))
str(toy.df)
library(dplyr)
toy.df %>% count(BarcodeID)
toy.df %>%
summarise(total_fees = sum(Fees)
msleep %>%
summarise(avg_sleep = mean(sleep_total))
toy.df %>%
summarise(total_fees = mean(Fees)
msleep %>%
summarise(avg_sleep = mean(sleep_total))
msleep %>%
summarise(avg_sleep = mean(sleep_total))
msleep
msleep %>%
summarise(avg_sleep = sum(sleep_total))
toy.df %>% count(BarcodeID)
toy.df %>% summarise(total_fees = mean(Fees)
msleep %>%
summarise(avg_sleep = sum(sleep_total))
Fees <- c(1:9)
toy.df <- data.frame(User, MovieTitle, BarcodeID, Fees)
str(toy.df)
library(dplyr)
toy.df %>% count(BarcodeID)
toy.df %>% summarise(total_fees = mean(Fees)
msleep %>%
summarise(avg_sleep = sum(sleep_total))
master.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/Perlut/data/Routput/master.csv', header = T)
library(plyr)
toy.df %>% count(BarcodeID)
toy.df %>% count(c(BarcodeID, Fees)
library(plyr)
> count(mtcars, 'gear')
toy.df %>% summarise(total_fees = mean(Fees)
msleep %>%
summarise(avg_sleep = sum(sleep_total))
toy.df %>% count(c(BarcodeID)
library(plyr)
> count(mtcars, 'gear')
toy.df %>% summarise(total_fees = mean(Fees)
msleep %>%
summarise(avg_sleep = sum(sleep_total))
toy.df %>% count(BarcodeID)
library(plyr)
count(mtcars, 'gear')
count(Fees)
count(BarcodeID, Fees)
count(c(BarcodeID, Fees))
count(toy.df(c('BarcodeID', 'Fees'))
library(plyr)
> count(mtcars, 'gear')
toy.df %>% summarise(total_fees = mean(Fees)
msleep %>%
summarise(avg_sleep = sum(sleep_total))
count(toy.df(c(BarcodeID, Fees))
library(plyr)
> count(mtcars, 'gear')
toy.df %>% summarise(total_fees = mean(Fees)
msleep %>%
summarise(avg_sleep = sum(sleep_total))
count(toy.df(BarcodeID, Fees))
detach("package:dplyr", unload=TRUE)
count(toy.df, Fees)
count(toy.df, 'Fees')
count(toy.df, 'BarcodeID')
count(toy.df, c('BarcodeID', 'Fees'))
count(toy.df, c('BarcodeID', 'User'))
count(toy.df, c('Fees', 'User'))
count(toy.df(User, Fees))
count(toy.df,c(User, Fees))
count(toy.df,c('User', 'Fees'))
count(toy.df,c'User')
count(toy.df,'User')
count(toy.df,'MovieTitle')
library(dplyr)
toy.df %>%
group_by(User) %>%
summarise(Fees = sum(Fees))
toy.df %>%
group_by(User, MovieTitle) %>%
summarise(Fees = sum(Fees))
toy.df[, sum(Fees), by = User]
library(data.table)
toy.df[, sum(Fees), by = User]
toy.df[, sum(Fees)]
toy.df[,sum(Fees), by = ]
toy.df[,list((Fees=sum(Fees)), by=User]
data[, sum(Frequency), by = Category]
data[,list(Frequency=sum(Frequency)),by=Category]
toy.df[,list((Fees=sum(Fees)), by=User]
data[, sum(Frequency), by = Category]
data[,list(Frequency=sum(Frequency)),by=Category]
toy.df[,list(Fees=sum(Fees)), by=User]
data = data.frame(Category=c("First","First","First","Second","Third", "Third", "Second"),
Frequency=c(10,15,5,2,14,20,3))
data[, sum(Frequency), by = Category]
data[,list(Frequency=sum(Frequency)),by=Category]
data[, lapply(.SD, sum), by = Category]
View(data)
data[, lapply(.SD, sum, na.rm=TRUE), by=category, .SDcols=c("a", "c", "z") ]
data[, lapply(.SD, sum, na.rm=TRUE), by=Category, .SDcols=c("First", "Second", "Third") ]
data[, lapply(.SD, sum, na.rm=TRUE), by=Category, .SDcols=c("Frequency") ]
data[, lapply(.SD, sum, na.rm=TRUE), by=Frequency, .SDcols=c("Category") ]
a = data.table(index=1:5,a=rnorm(5,10),b=rnorm(5,10),z=rnorm(5,10))
b = data.table(index=6:10,a=rnorm(5,10),b=rnorm(5,10),c=rnorm(5,10),d=rnorm(5,10))
dt = merge(a,b,by=intersect(names(a),names(b)),all=T)
dt$category = sample(letters[1:3],10,replace=T)
dt[, lapply(.SD, sum, na.rm=TRUE), by=category, .SDcols=c("a", "c", "z") ]
data[, lapply(.SD, sum, na.rm=TRUE), by=Frequency, .SDcols=c("Category") ]
View(dt)
dt[, lapply(.SD, sum, na.rm=TRUE), by=Category, .SDcols=c("Frequency") ]
data[, lapply(.SD, sum, na.rm=TRUE), by=Category, .SDcols=c("Frequency") ]
toy.df[,sum(Fees), by=User]
toy.df[,sum(Fees),by=User]
toy.df[,sum(Fees),by=(User)]
toy.df[,sum(Fees),by=list(User)]
toy.df[,lapply(.SD,sum) by=User]
toy.df[,lapply(.SD,sum), by=User]
detach("package:dplyr", unload=TRUE)
library(data.table)
data[, sum(Frequency), by = Category]
install.packages('xml2')
install.packages('purrr')
install.packages("purrr")
library(xml2)
library(purrr)
doc <- xmlParse(http://v4.boldsystems.org/index.php/API_Public/combined?taxon=Megaloptera)
doc <- xmlParse("http://v4.boldsystems.org/index.php/API_Public/combined?taxon=Megaloptera")
x <- read_xml("http://v4.boldsystems.org/index.php/API_Public/combined?taxon=Megaloptera")
x_list <- as_list(x)
x_df <- x_list %>% map('record') %>% flatten() %>% map_df(flatten)
x %>% xml_find_all('//record') %>% map(as_list) %>% map_df(flatten)
x %>% xml_find_all('//bin_uri') %>% map(as_list) %>% map_df(flatten)
x %>% xml_find_all('//record_id') %>% map(as_list) %>% map_df(flatten)
x %>% xml_find_all('//record') %>% map(as_list) %>% map_df(flatten)
xml_name(x)
xml_children(x)
baz <- xml_find_all(x, ".//phylum")
baz
xml_path(baz)
xml_attr(baz, "name")
xml_attr(baz, "taxon")
xml_attr(baz, "taxID")
baz <- xml_find_all(x, ".//taxonomy")
baz
xml_path(baz)
xml_attr(baz, "taxonomy")
xml_attr(baz, "phylum")
xml_attr(baz, "name")
y <- read_xml("<foo> <bar> text <baz/> </bar> </foo>")
y
x
y
xml_name(y)
xml_children(y)
xml_text(y)
xml_text(x)
xml_node(x)
?xml_node()
?xml_text()
xml_text(xml_find_all(x, "//x"))
xml_text(xml_find_all(x, "//phylum"))
xml_text(xml_find_all(x, "//class"))
phylum_name <- xml_text(xml_find_all(x, "//class"))
species_name <- xml_text(xml_find_all(x, "//species"))
xml_text(xml_find_all(x, "//species"))
phylum_name <- xml_text(xml_find_all(x, "//name"))
xml_text(xml_find_all(x, "//name"))
xml_children(x)
install.packages('XML')
library(XML)
xml.url <- “http://v4.boldsystems.org/index.php/API_Public/combined?taxon=Megaloptera”
xml.url <- "http://v4.boldsystems.org/index.php/API_Public/combined?taxon=Megaloptera"
xmlfile <- xmlTreeParse(xml.url)
class(xmlfile)
xmltop = xmlRoot(xmlfile)
print(xmltop)[1:2]
print(xmltop)[1:1]
xmlTree(tag = record)
xmlTree(tag = "record")
xmlTree(tag = "record", doc = xmlfile)
boldcat <- xmlSApply(xmltop, function(x) xmlSApply(x, xmlValue))
bold_df <- data.frame(t(boldcat),row.names=NULL)
View(bold_df)
bold_df[1:5,1:4]
bold.df <- as.data.frame(boldcat)
bold.df <- data.frame(boldcat)
bold.df <- data.frame(t(boldcat))
View(bold.df)
tbolddf <- t(bold_df)
View(tbolddf)
rm(bold_df, boldcat, xmlfile, xmltop)
rm(bold.df)
strsplit(tbolddf, split = ',')
bold_df <- data.frame(tbolddf)
View(bold_df)
rm(tbolddf)
big.df <- data.frame(do.call('rbind', strsplit(as.character(bold_df$tbolddf),'|',fixed=TRUE)))
big.df <- data.frame(do.call('rbind', strsplit(as.character(bold_df$tbolddf),',',fixed=TRUE)))
colnames(bold_df) <- "col1"
big.df <- cbind(bold_df, read.table(text = as.character(bold_df$col1), sep = ","))
bold_df[1,1]
library(bold)
install.packages("bold")
detach("package:XML", unload=TRUE)
library(bold)
bold_megaloptera <- bold_seqspec(taxon='Megaloptera', sepfasta=TRUE)
bold_megaloptera$fasta[1:2]
rm(xml.url, big.df, bold_df)
processid <- bold_megaloptera$data$processid
bin_uri <- bold_megaloptera$data$bin_uri
phylum_name <- bold_megaloptera$data$phylum_name
class_name <- bold_megaloptera$data$class_name
order_name <- bold_megaloptera$data$order_name
family_name <- bold_megaloptera$data$family_name
genus_name <- bold_megaloptera$data$genus_name
species_name <- bold_megaloptera$data$species_name
lat <- bold_megaloptera$data$lat
lon <- bold_megaloptera$data$lon
country <- bold_megaloptera$data$country
image_urls <- bold_megaloptera$data$image_urls
genbank_accession <- bold_megaloptera$data$genbank_accession
fasta <- bold_megaloptera$fasta
my.df <- data.frame(processid, bin_uri, phylum_name, class_name, order_name, family_name, genus_name, species_name,
lat, lon, country, image_urls, genbank_accession, fasta)
View(my.df)
fasta_seq <- bold_megaloptera$fasta
my.df <- data.frame(processid, bin_uri, phylum_name, class_name, order_name, family_name, genus_name, species_name,
lat, lon, country, image_urls, genbank_accession, fasta_seq)
fasta_seq <- bold_megaloptera$fasta[1:1769]
my.df <- data.frame(processid, bin_uri, phylum_name, class_name, order_name, family_name, genus_name, species_name,
lat, lon, country, image_urls, genbank_accession, fasta_seq)
View(my.df)
fasta_seq <- bold_megaloptera$fasta[1:1]
ra <- c(1,1,0,0,0,0)
rb <- c(1,0,1,0,0,0)
rc <- c(0,0,1,1,1,0)
rd <- c(0,0,1,0,0,0)
re <- c(0,0,0,0,0,1)
mat <- rbind(ra,rb,rc,rd,re)
View(mat)
colnames(mat) <- c("s1-L1", "s2-L1", "s1-L2", "s2-L2", "s1-L3", "s2-L3")
View(mat)
rownames(mat) <- c("OTU1", "OTU2", "OTU3", "OTU4", "OTU5")
subnames <- c("s1-L1", "s2-L3")
x <- subset(mat, rownames(mat) %in% subnames)
View(x)
x <- subset(mat, colnames(mat) %in% subnames)
x <- subset(mat, colnames(mat) %in% subnames)
rm(x)
colnames(mat) <- c("s1-G1", "s2-G1", "s3-G2", "s4-G2", "s5-G3", "s6-G3")
rownames(mat) <- c("OTU1", "OTU2", "OTU3", "OTU4", "OTU5")
mat
ra <- c(1,2,0,0,0,0)
rb <- c(3,0,4,0,0,0)
rc <- c(0,0,5,6,7,0)
rd <- c(0,0,8,0,0,0)
re <- c(0,0,0,0,0,99)
mat <- rbind(ra,rb,rc,rd,re)
colnames(mat) <- c("s1-G1", "s2-G1", "s3-G2", "s4-G2", "s5-G3", "s6-G3")
rownames(mat) <- c("OTU1", "OTU2", "OTU3", "OTU4", "OTU5")
dat.wide <- data.table(mat)
library(data.table)
dat.wide <- data.table(mat)
View(dat.wide)
myrownames <- rownames(mat)
dat.wide[, OTU := myrownames]
View(dat.wide)
dat.long <- melt(dat.wide)
View(dat.long)
dat.long[, c("sample","group") := tstrsplit(variable, split="-")]
dat.long[, variable := NULL]
View(dat.long)
unique.OTUs <- dat.long[, list(N=sum(value)), by=list(group, OTU)][, list(Ngroups=sum(N>0)), by=OTU][Ngroups==1]$OTU
dat.wide[OTU %in% unique.OTUs]
df_dupd <- dat.wide[! (OTU %in% unique.OTUs)]
View(df_dupd)
library(data.table)
library(reshape2)
library(tidyr)
library(ggplot2)
library(dplyr)
setwd("~/Repos/guano/OahuBird/")
h_otutable.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/OahuBird/data/amptk/OahuBird_lulu_h.otu_table.taxonomy.txt')
colnames(h_otutable.df)[1] <- ""
h_otutable.df[h_otutable.df == 0] <- NA       # we loaded a binary matrix; all zero's indicate absence of data, all 1's indicate presence of an amplicon
tmp.df <- melt(h_otutable.df)           # converting from wide format to long format (useful for plots)
rm(h_otutable.df)
colnames(tmp.df) <- c("OTUid", "Taxonomy", "SampleID", "CountReads")
tmp.df <- tmp.df[complete.cases(tmp.df),]
tmp.df <- separate(data = tmp.df,
col = Taxonomy,
into = c("TaxMethod", "AlignScore", "BOLDid", "kingdom_name", "phylum_name", "class_name",
"order_name", "family_name", "genus_name", "species_name"),
sep = "\\;|,|\\|")
## reformat taxonomy columns to discard given prefix
tmp.df$kingdom_name <- sub("k:", "", tmp.df$kingdom_name)
tmp.df$phylum_name <- sub("p:", "", tmp.df$phylum_name)
tmp.df$class_name <- sub("c:", "", tmp.df$class_name)
tmp.df$order_name <- sub("o:", "", tmp.df$order_name)
tmp.df$family_name <- sub("f:", "", tmp.df$family_name)
tmp.df$genus_name <- sub("g:", "", tmp.df$genus_name)
tmp.df$species_name <- sub("s:", "", tmp.df$species_name)
## append any of the 'SampleID' values which were actually NTCs (but not labeled as such):
## import target and replacement data.frame:
replace.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/OahuBird/data/Rrenamelist.df')
tmp2.df <- dplyr::left_join(tmp.df,replace.df, by = "SampleID")
## then substitute any `N/A` value with the original value for those values that didn't have a NTC match:
tmp.df <- within(tmp2.df, X <- ifelse(is.na(replacements), SampleID, replacements))
tmp.df$SampleID <- NULL
tmp.df$replacements <- NULL
colnames(tmp.df)[13] <- "SampleID"
rm(tmp2.df, replace.df)
## save this raw (unfiltered) data frame
setwd("~/Repos/guano/OahuBird/data/Routput/")
write.csv(tmp.df, "OahuBird_rawOTUtable.csv", quote = FALSE, row.names = FALSE)
rut.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/Rutgers/master.csv', header = TRUE)
perl.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/Perlut/data/Routput/master.csv', header = TRUE)
nau.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/NAUsupp/masterdf.csv', header = TRUE)
colnames(nau.df)[3] <- c("BOLDalt")
## Before we can match we need to append the `BOLDid` vectors to remove the "." delimiter in the `tmp.df` and `rut.df` objects:
tmp.df$BOLDalt <- tmp.df$BOLDid
tmp.df <- separate(tmp.df, col = BOLDalt, into = c("BOLDalt", "delete"), sep = "\\.")
tmp.df$delete <- NULL
rut.df$BOLDalt <- rut.df$BOLDid
rut.df <- separate(rut.df, col = BOLDalt, into = c("BOLDalt", "delete"), sep = "\\.")
rut.df$delete <- NULL
string <- unique(c(rut.df$BOLDalt, nau.df$BOLDalt, perl.df$BOLDalt))
find.list <- list("None", "UTAX", "SINTAX", "CFMR:IM4")
find.string <- paste(unlist(find.list), collapse = "|")
tmpx.list <- gsub(find.string, replacement = "", x = string)
allmatch.list <- tmpx.list[tmpx.list != ""]
rm(string, find.list, find.string, tmpx.list)
ProjectMatches.df <- tmp.df[tmp.df$BOLDalt %in% allmatch.list,]
# how many reads here?
sum(ProjectMatches.df$CountReads)    # 5,295,342 ... a huge number; represents about 2/5 of our overall data (13,950,987 reads)
# how many unique OTUs are identified?
length(unique(ProjectMatches.df$OTUid))    # 501 unique matches identified... (our data originally had 1416 OTUs)
## Finally, use that 'nauProjectMatches.df' object and determine how many reads and how frequently are these matches identified in our real data?
tmp_counts <- ProjectMatches.df %>%
group_by(BOLDalt) %>%
count()
tmp_sums <- ProjectMatches.df %>%
group_by(BOLDalt) %>%
summarise(TotalCounts = sum(CountReads))
Match_summary <- merge(tmp_counts, tmp_sums)
rm(tmp_counts, tmp_sums)
x <- tmp.df[,c(1,14)]         ## grab just the OTUid and BOLDalt vectors from the `tmp.df` object
y <- x[!duplicated(x[1:2]),]  ## obtain only unique combinations of OTUid and BOLDids (note there can be the same BOLDid for multiple OTUid's)
z <- merge(Match_summary, y)  ## paste these unique OTUid's for every BOLDid in the `Match_summary` object to identify trends in OTU read abundance and frequency of detection
## now group the datasets from our `Match_summary` list to include just the "BOLDalt" and "SampleID" columns, then make a frequency table from that:
tiny.nau = nau.df[,c(1,3)]
colnames(tiny.nau) <- c("SampleID", "BOLDalt")
tiny.nau$library <- "nau"
tiny.rut = rut.df[,c(1,17)]
colnames(tiny.rut) <- c("SampleID", "BOLDalt")
tiny.rut$library <- "rut"
tiny.perl = perl.df[,c(1,14)]
colnames(tiny.perl) <- c("SampleID", "BOLDalt")
tiny.perl$library <- "perl"
tmpMatch.df <- rbind(tiny.nau, tiny.perl, tiny.rut)  ## this is used for our frequency counts
## drop the 'SINTAX', 'UTAX', 'None', and 'CFMR:IM4' labels as they won't produce any meaningful matches:
tmp1.df <- subset(tmpMatch.df, BOLDalt != "SINTAX")
tmp2.df <- subset(tmp1.df, BOLDalt != "UTAX")
tmp3.df <- subset(tmp2.df, BOLDalt != "CFMR:IM4")
match.df <- subset(tmp3.df, BOLDalt != "None")
rm(tmp1.df, tmp2.df, tmp3.df)
x <- match.df %>%
group_by(library, BOLDalt) %>%
tally()
y <- subset(x, n <= 2)
remove1 <- subset(x, n > 2)
remove2 <- y[duplicated(y$BOLDalt),]
z <- y[!duplicated(y$BOLDalt),]
tmpdrop.list <- unique(c(remove1$BOLDalt, remove2$BOLDalt))
tmpx.list <- sub("BOLD:AAO4373", "", tmpdrop.list)
drop.list <- tmpx.list[tmpx.list != ""]
'%!in%' <- function(x,y)!('%in%'(x,y))
tmpfilt.df <- tmp.df[tmp.df$BOLDalt %!in% drop.list,]
tmpfilt2.df <- subset(tmpfilt.df, phylum_name == "Arthropoda")
length(unique(tmpfilt2.df$OTUid)) ## lots: 1,176
length(unique(tmpfilt2.df$BOLDalt)) ## 994; interesting degree of redundancy here...
toMatch <- c("^NTC")    # make a list of the regex terms to match
matches <- unique (grep(paste(toMatch,collapse="|"),
tmpfilt2.df$SampleID, value=TRUE))   # make a vector of every one of those matches fitting the regex above
NTCs.df <- tmpfilt2.df[tmpfilt2.df$SampleID %in% matches,]         # capture all matches of regex in 'tmp.df' object
# there are 5 total OTUs (out of a 1162 )
## How many total reads are there among all these NTCs?
sum(NTCs.df$CountReads) # there are just 7,485 total reads among all NTCs idenitified (out of 11,782,862 remaining)
NTC_otu.list <- NTCs.df$OTUid     # generate the list of all unique OTUs present in the NTCs
contam.df <- tmpfilt2.df[tmpfilt2.df$OTUid %in% NTC_otu.list,]    # find all matches from the above list in our original 'tmp.df' data frame object
# we find there are 95 matches; we know 5 of these are from the NTCs themselves
# each of these OTUs seem like real contaminants from the Hawaiian samples themselves - they appear in multiple samples with high read counts
# we'll retain each of these reads, but note that they were identified in a single contaminant sample after filtering
## Save these data:
setwd("~/Repos/guano/OahuBird/data/Routput/")
write.csv(Match_summary, "suspectedContaminants.csv", quote = FALSE)
write.csv(tmp.df, "OahuBird_rawOTUtable.csv", quote = FALSE)
write.csv(tmpfilt2.df, "FilteredOTUs.csv", quote = FALSE, row.names = FALSE)
rm(x,y,z,
nau.df, rut.df, perl.df,
tiny.nau, tiny.perl, tiny.rut,
tmp.df, tmpfilt.df, tmpMatch.df, NTCs.df,
Match_summary, match.df, contam.df, ProjectMatches.df,
remove1, remove2)
rm(allmatch.list, drop.list, matches, NTC_otu.list, tmpdrop.list, tmpx.list, toMatch)
meta.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/OahuBird/data/OahuBird_metadata.csv', header = TRUE)
meta.df <- meta.df[,c(4:6)]
colnames(meta.df) <- c("SampleID", "DateSampled", "BirdSpecies")
master.df <- merge(tmpfilt2.df, meta.df)
setwd("~/Repos/guano/OahuBird/data/Routput/")
write.csv(master.df, "master.csv", row.names = F, quote = F)
library(plyr)
library(plyr)
OTUperSample = count(master.df, vars = c("SampleID"))   # There are 99 remaining true samples (all bit one NTC has been filtered out)
sum(OTUperSample$freq > 1)    # There are 90 samples with at least 2 OTUs
sum(OTUperSample$freq > 4)    # There are 51 samples with at least 4 OTUs
sum(OTUperSample$freq > 9)    # There are 32 samples with at least 10 OTUs
speciesOnly.df <- na.omit(master.df)
freq_species <- as.data.frame(table(speciesOnly.df$species_name))     # frequency table of species detected
colnames(freq_species) <- c("species_name", "counts")
write.csv(freq_species, "species_frq_table.csv", row.names = F, quote = F)
sum(freq_species$counts > 1)  # note 408 species identified, but most are not abundant (no OTU ID'd more than 11 samples)
View(freq_species)
