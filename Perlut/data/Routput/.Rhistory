nauMatch_summary <- merge(tmp_counts, tmp_sums)
rm(tmp_counts, tmp_sums)
View(nauMatch_summary)
tmp_counts <- nauProjectMatches.df %>%
group_by(BOLDid) %>%
count()
tmp_sums <- nauProjectMatches.df %>%
group_by(BOLDid) %>%
summarise(TotalCounts = sum(CountReads))
nauMatch_summary <- merge(tmp_counts, tmp_sums)
rm(tmp_counts, tmp_sums)
View(nauMatch_summary)
View(nauProject.df)
setwd("~/Repos/guano/Perlut/data/Routput/")
write.csv(nauMatch_summary, "suspectedContaminants.csv", quote = F)
setwd("~/Repos/guano/Perlut/data/Routput/")
h_otutable.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/Perlut/data/amptk/Perlut_h.otu_table.taxonomy.txt')
## reformat matrix into data.frame, split strings into appropriate columns
h_otutable.df[h_otutable.df == 0] <- NA       # we loaded a binary matrix; all zero's indicate absence of data, all 1's indicate presence of an amplicon
tmp.df <- melt(h_otutable.df)           # converting from wide format to long format (useful for plots)
rm(h_otutable.df)
colnames(tmp.df) <- c("OTUid", "Taxonomy", "SampleID", "CountReads")
tmp.df <- tmp.df[complete.cases(tmp.df),]
tmp.df <- separate(data = tmp.df,
col = Taxonomy,
into = c("TaxMethod", "AlignScore", "BOLDid", "kingdom_name", "phylum_name", "class_name",
"order_name", "family_name", "genus_name", "species_name"),
sep = "\\;|,|\\|")
## reformat taxonomy columns to discard given prefix
tmp.df$kingdom_name <- sub("k:", "", tmp.df$kingdom_name)
tmp.df$phylum_name <- sub("p:", "", tmp.df$phylum_name)
tmp.df$class_name <- sub("c:", "", tmp.df$class_name)
tmp.df$order_name <- sub("o:", "", tmp.df$order_name)
tmp.df$family_name <- sub("f:", "", tmp.df$family_name)
tmp.df$genus_name <- sub("g:", "", tmp.df$genus_name)
tmp.df$species_name <- sub("s:", "", tmp.df$species_name)
write.csv(tmp.df, "Perlut_rawOTUtable.csv", quote = F)
nauProject.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/NAUsupp/nauProject_BINlist.txt', header = F)
colnames(nauProject.df) <- c("BOLDid", "Taxonomy")
nauProject.df <- separate(data = nauProject.df,
col = Taxonomy,
into = c("kingdom_name", "phylum_name", "class_name",
"order_name", "family_name", "genus_name", "species_name"),
sep = ",")
nauProject.df$kingdom_name <- sub("k:", "", nauProject.df$kingdom_name)
nauProject.df$phylum_name <- sub("p:", "", nauProject.df$phylum_name)
nauProject.df$class_name <- sub("c:", "", nauProject.df$class_name)
nauProject.df$order_name <- sub("o:", "", nauProject.df$order_name)
nauProject.df$family_name <- sub("f:", "", nauProject.df$family_name)
nauProject.df$genus_name <- sub("g:", "", nauProject.df$genus_name)
nauProject.df$species_name <- sub("s:", "", nauProject.df$species_name)
## get a list of those BOLDids... note we're probably missing some given that the old data set didn't follow the exact same taxonomy script (it was done over a year ago; things have changed within 'amptk')
nauProject.list <- nauProject.df$BOLDid
## Because of the way 'amptk' outputs the BOLDid values now, we need to modify the BOLDid names a bit to match with our list we just generated
tmp.df$BOLDalt <- gsub('.{2}$', '', tmp.df$BOLDid)
## Using that 'nauProject.list' object, query that list against the 'tmp.df$BOLDalt' vector
nauProjectMatches.df <- tmp.df[tmp.df$BOLDalt %in% nauProject.list,]
# how many reads here?
sum(nauProjectMatches.df$CountReads)    # 627,174 ... a big number, but > 500,000 are from just a one OTU (Dicranomyia (Idiopyga) halterella)
# how many unique OTUs are identified?
length(unique(nauProjectMatches.df$OTUid))    # 39 unique matches identified
## Finally, use that 'nauProjectMatches.df' object and determine how many reads and how frequently are these matches identified in our real data?
tmp_counts <- nauProjectMatches.df %>%
group_by(BOLDid) %>%
count()
tmp_sums <- nauProjectMatches.df %>%
group_by(BOLDid) %>%
summarise(TotalCounts = sum(CountReads))
nauMatch_summary <- merge(tmp_counts, tmp_sums)
rm(tmp_counts, tmp_sums)
write.csv(nauMatch_summary, "suspectedContaminants.csv", quote = F)
OTUdrop.list <- nauMatch_summary$BOLDid
'%!in%' <- function(x,y)!('%in%'(x,y))
tmpfilt.df <- tmp.df[tmp.df$BOLDalt %!in% OTUdrop.list,]
tmpfilt.df <- tmp.df[tmp.df$BOLDid %!in% OTUdrop.list,]
View(tmpfilt.df)
OTUdrop.list
nauProjectMatches.df <- tmp.df[tmp.df$BOLDalt %in% nauProject.list,]
View(nauProject.df)
tmp.df[1,14]
nauProject.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/NAUsupp/nauProject_BINlist.txt', header = F)
colnames(nauProject.df) <- c("BOLDid", "Taxonomy")
nauProject.df <- separate(data = nauProject.df,
col = Taxonomy,
into = c("kingdom_name", "phylum_name", "class_name",
"order_name", "family_name", "genus_name", "species_name"),
sep = ",")
nauProject.df$kingdom_name <- sub("k:", "", nauProject.df$kingdom_name)
nauProject.df$phylum_name <- sub("p:", "", nauProject.df$phylum_name)
nauProject.df$class_name <- sub("c:", "", nauProject.df$class_name)
nauProject.df$order_name <- sub("o:", "", nauProject.df$order_name)
nauProject.df$family_name <- sub("f:", "", nauProject.df$family_name)
nauProject.df$genus_name <- sub("g:", "", nauProject.df$genus_name)
nauProject.df$species_name <- sub("s:", "", nauProject.df$species_name)
nauProject.list <- nauProject.df$BOLDid
x <- separate(nauProject.df, col = BOLDid, into = c("BOLDid", "delete"), sep = "\\.")
View(x)
nauProject.df <- separate(data = nauProject.df,
col = Taxonomy,
into = c("kingdom_name", "phylum_name", "class_name",
"order_name", "family_name", "genus_name", "species_name"),
sep = ",")
h_otutable.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/Perlut/data/amptk/Perlut_h.otu_table.taxonomy.txt')
## reformat matrix into data.frame, split strings into appropriate columns
h_otutable.df[h_otutable.df == 0] <- NA       # we loaded a binary matrix; all zero's indicate absence of data, all 1's indicate presence of an amplicon
tmp.df <- melt(h_otutable.df)           # converting from wide format to long format (useful for plots)
rm(h_otutable.df)
colnames(tmp.df) <- c("OTUid", "Taxonomy", "SampleID", "CountReads")
tmp.df <- tmp.df[complete.cases(tmp.df),]
tmp.df <- separate(data = tmp.df,
col = Taxonomy,
into = c("TaxMethod", "AlignScore", "BOLDid", "kingdom_name", "phylum_name", "class_name",
"order_name", "family_name", "genus_name", "species_name"),
sep = "\\;|,|\\|")
## reformat taxonomy columns to discard given prefix
tmp.df$kingdom_name <- sub("k:", "", tmp.df$kingdom_name)
tmp.df$phylum_name <- sub("p:", "", tmp.df$phylum_name)
tmp.df$class_name <- sub("c:", "", tmp.df$class_name)
tmp.df$order_name <- sub("o:", "", tmp.df$order_name)
tmp.df$family_name <- sub("f:", "", tmp.df$family_name)
tmp.df$genus_name <- sub("g:", "", tmp.df$genus_name)
tmp.df$species_name <- sub("s:", "", tmp.df$species_name)
nauProject.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/NAUsupp/nauProject_BINlist.txt', header = F)
colnames(nauProject.df) <- c("BOLDid", "Taxonomy")
nauProject.df <- separate(data = nauProject.df,
col = Taxonomy,
into = c("kingdom_name", "phylum_name", "class_name",
"order_name", "family_name", "genus_name", "species_name"),
sep = ",")
separate(nauProject.df, col = BOLDid, into = c("BOLDid", "delete"), sep = "\\.")
nauProject.df$kingdom_name <- sub("k:", "", nauProject.df$kingdom_name)
nauProject.df$phylum_name <- sub("p:", "", nauProject.df$phylum_name)
nauProject.df$class_name <- sub("c:", "", nauProject.df$class_name)
nauProject.df$order_name <- sub("o:", "", nauProject.df$order_name)
nauProject.df$family_name <- sub("f:", "", nauProject.df$family_name)
nauProject.df$genus_name <- sub("g:", "", nauProject.df$genus_name)
nauProject.df$species_name <- sub("s:", "", nauProject.df$species_name)
nauProject.list <- nauProject.df$BOLDid
nauProjectMatches.df <- tmp.df[tmp.df$BOLDalt %in% nauProject.list,]
nauProjectMatches.df <- tmp.df[tmp.df$BOLDid %in% nauProject.list,]
nauProject.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/NAUsupp/nauProject_BINlist.txt', header = F)
colnames(nauProject.df) <- c("BOLDid", "Taxonomy")
nauProject.df <- separate(data = nauProject.df,
col = Taxonomy,
into = c("kingdom_name", "phylum_name", "class_name",
"order_name", "family_name", "genus_name", "species_name"),
sep = ",")
separate(nauProject.df, col = BOLDid, into = c("BOLDid", "delete"), sep = "\\.")
h_otutable.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/Perlut/data/amptk/Perlut_h.otu_table.taxonomy.txt')
## reformat matrix into data.frame, split strings into appropriate columns
h_otutable.df[h_otutable.df == 0] <- NA       # we loaded a binary matrix; all zero's indicate absence of data, all 1's indicate presence of an amplicon
tmp.df <- melt(h_otutable.df)           # converting from wide format to long format (useful for plots)
rm(h_otutable.df)
colnames(tmp.df) <- c("OTUid", "Taxonomy", "SampleID", "CountReads")
tmp.df <- tmp.df[complete.cases(tmp.df),]
tmp.df <- separate(data = tmp.df,
col = Taxonomy,
into = c("TaxMethod", "AlignScore", "BOLDid", "kingdom_name", "phylum_name", "class_name",
"order_name", "family_name", "genus_name", "species_name"),
sep = "\\;|,|\\|")
## reformat taxonomy columns to discard given prefix
tmp.df$kingdom_name <- sub("k:", "", tmp.df$kingdom_name)
tmp.df$phylum_name <- sub("p:", "", tmp.df$phylum_name)
tmp.df$class_name <- sub("c:", "", tmp.df$class_name)
tmp.df$order_name <- sub("o:", "", tmp.df$order_name)
tmp.df$family_name <- sub("f:", "", tmp.df$family_name)
tmp.df$genus_name <- sub("g:", "", tmp.df$genus_name)
tmp.df$species_name <- sub("s:", "", tmp.df$species_name)
## save this raw (unfiltered) data frame
nauProject.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/NAUsupp/nauProject_BINlist.txt', header = F)
colnames(nauProject.df) <- c("BOLDid", "Taxonomy")
nauProject.df <- separate(data = nauProject.df,
col = Taxonomy,
into = c("kingdom_name", "phylum_name", "class_name",
"order_name", "family_name", "genus_name", "species_name"),
sep = ",")
nauProject.df <- separate(nauProject.df, col = BOLDid, into = c("BOLDid", "delete"), sep = "\\.")
nauProject.df$delete <- NULL
nauProject.df$kingdom_name <- sub("k:", "", nauProject.df$kingdom_name)
nauProject.df$phylum_name <- sub("p:", "", nauProject.df$phylum_name)
nauProject.df$class_name <- sub("c:", "", nauProject.df$class_name)
nauProject.df$order_name <- sub("o:", "", nauProject.df$order_name)
nauProject.df$family_name <- sub("f:", "", nauProject.df$family_name)
nauProject.df$genus_name <- sub("g:", "", nauProject.df$genus_name)
nauProject.df$species_name <- sub("s:", "", nauProject.df$species_name)
nauProject.list <- nauProject.df$BOLDid
h_otutable.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/Perlut/data/amptk/Perlut_h.otu_table.taxonomy.txt')
## reformat matrix into data.frame, split strings into appropriate columns
h_otutable.df[h_otutable.df == 0] <- NA       # we loaded a binary matrix; all zero's indicate absence of data, all 1's indicate presence of an amplicon
tmp.df <- melt(h_otutable.df)           # converting from wide format to long format (useful for plots)
rm(h_otutable.df)
colnames(tmp.df) <- c("OTUid", "Taxonomy", "SampleID", "CountReads")
tmp.df <- tmp.df[complete.cases(tmp.df),]
tmp.df <- separate(data = tmp.df,
col = Taxonomy,
into = c("TaxMethod", "AlignScore", "BOLDid", "kingdom_name", "phylum_name", "class_name",
"order_name", "family_name", "genus_name", "species_name"),
sep = "\\;|,|\\|")
## reformat taxonomy columns to discard given prefix
tmp.df$kingdom_name <- sub("k:", "", tmp.df$kingdom_name)
tmp.df$phylum_name <- sub("p:", "", tmp.df$phylum_name)
tmp.df$class_name <- sub("c:", "", tmp.df$class_name)
tmp.df$order_name <- sub("o:", "", tmp.df$order_name)
tmp.df$family_name <- sub("f:", "", tmp.df$family_name)
tmp.df$genus_name <- sub("g:", "", tmp.df$genus_name)
tmp.df$species_name <- sub("s:", "", tmp.df$species_name)
nauProject.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/NAUsupp/nauProject_BINlist.txt', header = F)
colnames(nauProject.df) <- c("BOLDid", "Taxonomy")
nauProject.df <- separate(data = nauProject.df,
col = Taxonomy,
into = c("kingdom_name", "phylum_name", "class_name",
"order_name", "family_name", "genus_name", "species_name"),
sep = ",")
nauProject.df$kingdom_name <- sub("k:", "", nauProject.df$kingdom_name)
nauProject.df$phylum_name <- sub("p:", "", nauProject.df$phylum_name)
nauProject.df$class_name <- sub("c:", "", nauProject.df$class_name)
nauProject.df$order_name <- sub("o:", "", nauProject.df$order_name)
nauProject.df$family_name <- sub("f:", "", nauProject.df$family_name)
nauProject.df$genus_name <- sub("g:", "", nauProject.df$genus_name)
nauProject.df$species_name <- sub("s:", "", nauProject.df$species_name)
tmp.df$BOLDalt <- tmp.df$BOLDid
tmp.df <- separate(tmp.df, col = BOLDalt, into = c("BOLDalt", "delete"), sep = "\\.")
tmp.df$delete <- NULL
nauProjectMatches.df <- tmp.df[tmp.df$BOLDalt %in% nauProject.list,]
nauProject.list <- nauProject.df$BOLDid
nauProjectMatches.df <- tmp.df[tmp.df$BOLDalt %in% nauProject.list,]
sum(nauProjectMatches.df$CountReads)    # 627,174 ... a big number, but > 500,000 are from just a one OTU (Dicranomyia (Idiopyga) halterella)
length(unique(nauProjectMatches.df$OTUid))    # 39 unique matches identified
tmp_counts <- nauProjectMatches.df %>%
group_by(BOLDid) %>%
count()
tmp_sums <- nauProjectMatches.df %>%
group_by(BOLDid) %>%
summarise(TotalCounts = sum(CountReads))
nauMatch_summary <- merge(tmp_counts, tmp_sums)
rm(tmp_counts, tmp_sums)
View(nauProjectMatches.df)
setwd("~/Repos/guano/Perlut/data/Routput/")
write.csv(nauMatch_summary, "suspectedContaminants.csv", quote = F)
write.csv(tmp.df, "Perlut_rawOTUtable.csv", quote = F)
View(nauMatch_summary)
sum(nauMatch_summary$n)
OTUdrop.list <- nauMatch_summary$BOLDid
'%!in%' <- function(x,y)!('%in%'(x,y))
tmpfilt.df <- tmp.df[tmp.df$BOLDid %!in% OTUdrop.list,]
View(tmpfilt.df)
View(nauProject.df)
NTCs.df <- subset(tmpfilt.df[grep("^extBlank",tmpfilt.df$SampleID),])
sum(NTCs.df$CountReads)
View(NTCs.df)
tmp_counts <- NTCs.df %>%
group_by(SampleID) %>%
count()
tmp_sums <- NTCs.df %>%
group_by(SampleID) %>%
summarise(TotalCounts = sum(CountReads))
NTC_summary <- merge(tmp_counts, tmp_sums)
rm(tmp_counts, tmp_sums)
View(NTC_summary)
NTC_OTU_sums <- NTCs.df %>%
group_by(OTUid) %>%
summarise(TotalCounts = sum(CountReads))
View(NTC_OTU_sums)
NTC_otu.list <- NTCs.df$OTUid     # generate the list of all unique OTUs present in the NTCs
contam.df <- tmpfilt.df[tmpfilt.df$OTUid %in% NTC_otu.list,]    # find all matches from the above list in our original 'tmp.df' data frame object
View(contam.df)
sum(contam.df$CountReads)
tmp_counts <- contam.df %>%
group_by(SampleID) %>%
count()
tmp_sums <- contam.df %>%
group_by(SampleID) %>%
summarise(TotalCounts = sum(CountReads))
contam_summary <- merge(tmp_counts, tmp_sums)
rm(tmp_counts, tmp_sums)
View(contam_summary)
tmpfilt2.df <- tmpfilt.df[tmpfilt.df$BOLDid %!in% NTC_otu.list,]
tmpfilt2.df <- tmpfilt.df[tmpfilt.df$OTUid %!in% NTC_otu.list,]
tmpfilt3.df <- subset(tmpfilt2.df, order_name != "Chiroptera")
View(tmpfilt3.df)
tmpfilt3.df <- tmpfilt3.df[grep("^MockIM", tmpfilt3.df$OTUid, invert = TRUE),]
View(tmp.df)
NTCs.df <- subset(tmp.df[grep("^extBlank | nosample | ^solutBlank",tmp.df$SampleID),])
NTCs.df <- subset(tmp.df[grepl("^extBlank | nosample | ^solutBlank",tmp.df$SampleID),])
NTCs.df <- subset(tmp.df[grep("^extBlank",tmp.df$SampleID),])
toMatch <- c("^extBlank", "nosample", "^solutBlank")
matches <- unique (grep(paste(toMatch,collapse="|"),
tmp.df$SampleID, value=TRUE))
x <- subset(tmp.df[grep(matches,tmp.df$SampleID),])
View(x)
x <- tmp.df[tmp.df$SampleID %in% matches]
View(x)
sum(NTCs.df$CountReads)
NTCs.df <- tmp.df[tmp.df$SampleID %in% matches]         # capture all matches of regex in 'tmp.df' object
sum(NTCs.df$CountReads)
tmp_counts <- NTCs.df %>%
group_by(SampleID) %>%
count()
tmp_sums <- NTCs.df %>%
group_by(SampleID) %>%
summarise(TotalCounts = sum(CountReads))
NTC_summary <- merge(tmp_counts, tmp_sums)
rm(tmp_counts, tmp_sums)
View(NTC_summary)
NTC_OTU_sums <- NTCs.df %>%
group_by(OTUid) %>%
summarise(TotalCounts = sum(CountReads))
View(NTC_OTU_sums)
NTC_otu.list <- NTCs.df$OTUid     # generate the list of all unique OTUs present in the NTCs
contam.df <- tmp.df[tmp.df$OTUid %in% NTC_otu.list,]    # find all matches from the above list in our original 'tmp.df' data frame object
sum(contam.df$CountReads)
tmp_counts <- contam.df %>%
group_by(SampleID) %>%
count()
tmp_sums <- contam.df %>%
group_by(SampleID) %>%
summarise(TotalCounts = sum(CountReads))
contam_summary <- merge(tmp_counts, tmp_sums)
rm(tmp_counts, tmp_sums)
View(contam_summary)
nauProject.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/NAUsupp/nauProject_BINlist.txt', header = F)
colnames(nauProject.df) <- c("BOLDid", "Taxonomy")
nauProject.df <- separate(data = nauProject.df,
col = Taxonomy,
into = c("kingdom_name", "phylum_name", "class_name",
"order_name", "family_name", "genus_name", "species_name"),
sep = ",")
nauProject.df$kingdom_name <- sub("k:", "", nauProject.df$kingdom_name)
nauProject.df$phylum_name <- sub("p:", "", nauProject.df$phylum_name)
nauProject.df$class_name <- sub("c:", "", nauProject.df$class_name)
nauProject.df$order_name <- sub("o:", "", nauProject.df$order_name)
nauProject.df$family_name <- sub("f:", "", nauProject.df$family_name)
nauProject.df$genus_name <- sub("g:", "", nauProject.df$genus_name)
nauProject.df$species_name <- sub("s:", "", nauProject.df$species_name)
tmp.df$BOLDalt <- tmp.df$BOLDid
tmp.df <- separate(tmp.df, col = BOLDalt, into = c("BOLDalt", "delete"), sep = "\\.")
tmp.df$delete <- NULL
nauProject.list <- nauProject.df$BOLDid
nauProjectMatches.df <- tmp.df[tmp.df$BOLDalt %in% nauProject.list,]
sum(nauProjectMatches.df$CountReads)    # 628,109 ... a big number, but > 500,000 are from just a one OTU (Dicranomyia (Idiopyga) halterella)
length(unique(nauProjectMatches.df$OTUid))    # 41 unique matches identified
tmp_counts <- nauProjectMatches.df %>%
group_by(BOLDid) %>%
count()
tmp_sums <- nauProjectMatches.df %>%
group_by(BOLDid) %>%
summarise(TotalCounts = sum(CountReads))
nauMatch_summary <- merge(tmp_counts, tmp_sums)
rm(tmp_counts, tmp_sums)
setwd("~/Repos/guano/Perlut/data/Routput/")
write.csv(nauMatch_summary, "suspectedContaminants.csv", quote = F)
write.csv(tmp.df, "Perlut_rawOTUtable.csv", quote = F)
OTUdrop.list <- nauMatch_summary$BOLDid
rm(x)
'%!in%' <- function(x,y)!('%in%'(x,y))
tmpfilt.df <- tmp.df[tmp.df$BOLDid %!in% OTUdrop.list,]
NTCs.df <- tmpfilt.df[tmpfilt.df$SampleID %in% matches]
View(NTCs.df)
sum(NTCs.df$CountReads)
tmp_counts <- NTCs.df %>%
group_by(SampleID) %>%
count()
tmp_sums <- NTCs.df %>%
group_by(SampleID) %>%
summarise(TotalCounts = sum(CountReads))
NTC_summary <- merge(tmp_counts, tmp_sums)
rm(tmp_counts, tmp_sums)
NTC_OTU_sums <- NTCs.df %>%
group_by(OTUid) %>%
summarise(TotalCounts = sum(CountReads))
View(NTC_summary)
View(NTC_OTU_sums)
NTC_otu.list <- NTCs.df$OTUid     # generate the list of all unique OTUs present in the NTCs
contam.df <- tmpfilt.df[tmpfilt.df$OTUid %in% NTC_otu.list,]    # find all matches from the above list in our original 'tmp.df' data frame object
sum(contam.df$CountReads)
tmp_counts <- contam.df %>%
group_by(SampleID) %>%
count()
tmp_sums <- contam.df %>%
group_by(SampleID) %>%
summarise(TotalCounts = sum(CountReads))
contam_summary <- merge(tmp_counts, tmp_sums)
rm(tmp_counts, tmp_sums)
View(contam_summary)
tmpfilt2.df <- tmpfilt.df[tmpfilt.df$OTUid %!in% NTC_otu.list,]
View(tmpfilt2.df)
tmpfilt3.df <- subset(tmpfilt2.df, order_name != "Chiroptera")
tmpfilt3.df <- tmpfilt3.df[grep("^MockIM", tmpfilt3.df$OTUid, invert = TRUE),]
View(tmpfilt3.df)
tmpfilt3.df <- subset(tmpfilt2.df, order_name == "Arthropoda")
tmpfilt3.df <- subset(tmpfilt2.df, phylum_name == "Arthropoda")
filtdOTUs.df <- subset(tmpfilt2.df, phylum_name == "Arthropoda")
setwd("~/Repos/guano/Perlut/data/Routput/")
write.csv(filtdOTUs.df, "filteredOTUtable.csv", quote = F)
rm(tmpfilt3.df)
View(contam_summary)
View(contam.df)
write.csv(contam.df, "contaminantTable.csv", quote = F)
rm(tmp.df, tmpfilt.df, tmpfilt2.df,
contam_summary, contam.df,
nauMatch_summary, nauProject.df,
NTC_OTU_sums, NTC_summary, NTCs.df)
rm(matches, nauProject.list, NTC_otu.list, OTUdrop.list, toMatch)
meta.df <- fread('../Perlut_metadata.csv', header = T)
View(meta.df)
meta.df <- fread('../Perlut_metadata.csv', header = T)
master.df <- merge(tmp.df, meta.df)
master.df <- merge(filtdOTUs.df, meta.df)
rm(filtdOTUs.df, meta.df)
master.df$onclick <- paste("http://v4.boldsystems.org/index.php/Public_BarcodeCluster?clusteruri=",
as.character(master.df$BOLDid), sep = "")
View(master.df)
master.df <- master.df[grepl("None", BOLDid), onclick := "no_link_available"];    # when BOLDid not available, removed broken link
master.df$onclick <- paste("http://v4.boldsystems.org/index.php/Public_BarcodeCluster?clusteruri=",
as.character(master.df$BOLDalt), sep = "")
master.df[5,22]
setwd("~/Repos/guano/Perlut/data/Routput/")
write.csv(master.df, "master.csv", row.names = F, quote = F)
library(plyr)
setwd("~/Repos/guano/Perlut/data/Routput/")
OTUperSample = count(master.df, vars = c("SampleID"))   # There are 92 remaining samples; 5 of these are negative controls
View(OTUperSample)
sum(OTUperSample$freq > 1)    # There are 74 samples with at least 2 OTUs (includes all 5 negative controls)
sum(OTUperSample$freq > 4)    # There are 41 samples with at least 5 OTUs (includes 2 negative controls)
sum(OTUperSample$freq > 9)    # There are 26 samples with at least 10 OTUs (includes 1 negative control)
speciesOnly.df <- na.omit(master.df)
freq_species <- as.data.frame(table(speciesOnly.df$species_name))     # frequency table of species detected
colnames(freq_species) <- c("species_name", "counts")
write.csv(freq_species, "species_frq_table.csv", row.names = F, quote = F)
sum(freq_species$counts > 1)  # note 172 species identified, but almost all rare (just 55 OTUs detected more than once)
View(speciesOnly.df)
View(freq_species)
OTUperSite = count(master.df, vars = c("NestBox"))
View(OTUperSite)
write.csv(OTUperSite, "OTU_per_Site.csv", row.names = F, quote = F)
OTUperSiteWeek = count(master.df, vars = c("Location", "Date"))
OTUperSiteWeek = count(master.df, vars = c("NestBox", "Date"))
View(OTUperSiteWeek)
View(OTUperSite)
colnames(OTUperSite) <- c("NestBox", "NumberOfDetections")
write.csv(OTUperSite, "OTU_per_Site.csv", row.names = F, quote = F)
colnames(OTUperSiteWeek) <- c("NestBox", "Date", "NumberOfDetections")
write.csv(OTUperSiteWeek, "OTU_per_SiteWeek.csv", row.names = F, quote = F)
pestlist.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/pestlist.csv')
library(data.table)
library(ggplot2)
library(ggiraph)  # see: https://davidgohel.github.io/ggiraph/reference/index.html
master.df <- fread('https://raw.githubusercontent.com/devonorourke/guano/master/Perlut/data/Routput/master.csv')
b <- ggplot(master.df, aes(x = NestBox, fill = order_name)) +
geom_bar_interactive(aes(data_id = species_name,
tooltip = species_name,
onclick = onclick), size = 2) +
labs(title = "Frequency of arthropods detected in guano \n from New Hampshire birds",
subtitle = "guano and metadata collected by Noah Perlut; molecular and bioinformatic work performed by Devon O'Rourke",
caption = "Guano was sampled from nest boxes at a variety of sites and dates",
x = "Nest box location",
y = "Number of times observed") +
theme(legend.position = "right") +
guides(fill=guide_legend(title="Taxonomic Order")) +
theme(plot.subtitle=element_text(size=8, hjust=0.5, face="italic", color="black")) +
theme(plot.caption=element_text(size=8, hjust=0.5, face="italic", color="black")) +
scale_fill_manual(values=size20)
ggiraph(code = print(b), zoom_max = 5)
length(unique(master.df$order_name))
length(unique(master.df$class_name))
b <- ggplot(master.df, aes(x = NestBox, fill = class_name)) +
geom_bar_interactive(aes(data_id = species_name,
tooltip = species_name,
onclick = onclick), size = 2) +
labs(title = "Frequency of arthropods detected in guano \n from New Hampshire birds \n grouped by taxonomic class",
subtitle = "guano and metadata collected by Noah Perlut; molecular and bioinformatic work performed by Devon O'Rourke",
caption = "Guano was sampled from nest boxes at a variety of sites and dates",
x = "Nest box location",
y = "Number of times observed") +
theme(legend.position = "right") +
guides(fill=guide_legend(title="Taxonomic Class")) +
theme(plot.subtitle=element_text(size=8, hjust=0.5, face="italic", color="black")) +
theme(plot.caption=element_text(size=8, hjust=0.5, face="italic", color="black")) +
scale_fill_manual(values=size20)
tol8 = c("#332288", "#88CCEE", "#44AA99", "#117733", "#999933", "#DDCC77", "#CC6677","#AA4499")
b <- ggplot(master.df, aes(x = NestBox, fill = class_name)) +
geom_bar_interactive(aes(data_id = species_name,
tooltip = species_name,
onclick = onclick), size = 2) +
labs(title = "Frequency of arthropods detected in guano \n from New Hampshire birds \n grouped by taxonomic class",
subtitle = "guano and metadata collected by Noah Perlut; molecular and bioinformatic work performed by Devon O'Rourke",
caption = "Guano was sampled from nest boxes at a variety of sites and dates",
x = "Nest box location",
y = "Number of times observed") +
theme(legend.position = "right") +
guides(fill=guide_legend(title="Taxonomic Class")) +
theme(plot.subtitle=element_text(size=8, hjust=0.5, face="italic", color="black")) +
theme(plot.caption=element_text(size=8, hjust=0.5, face="italic", color="black")) +
scale_fill_manual(values=tol8)
ggiraph(code = print(b), zoom_max = 5)
tol9 = c("#332288", "#88CCEE", "#44AA99", "#117733", "#999933", "#DDCC77", "#CC6677", "#882255", "#AA4499")
b <- ggplot(master.df, aes(x = NestBox, fill = class_name)) +
geom_bar_interactive(aes(data_id = species_name,
tooltip = species_name,
onclick = onclick), size = 2) +
labs(title = "Frequency of arthropods detected in guano \n from New Hampshire birds \n grouped by taxonomic class",
subtitle = "guano and metadata collected by Noah Perlut; molecular and bioinformatic work performed by Devon O'Rourke",
caption = "Guano was sampled from nest boxes at a variety of sites and dates",
x = "Nest box location",
y = "Number of times observed") +
theme(legend.position = "right") +
guides(fill=guide_legend(title="Taxonomic Class")) +
theme(plot.subtitle=element_text(size=8, hjust=0.5, face="italic", color="black")) +
theme(plot.caption=element_text(size=8, hjust=0.5, face="italic", color="black")) +
scale_fill_manual(values=tol9)
ggiraph(code = print(b), zoom_max = 5)
master.df[1,22]
